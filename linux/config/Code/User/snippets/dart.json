{
  // Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "cubit": {
    "prefix": "cubit",
    "body": [
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "",
      "class $0Cubit extends Cubit<$0State> {",
      "\t$0Cubit() : super(const $0State());",
      "",
      "}",
      "",
      "abstract class $0State {",
      "\tconst $0State();",
      "}"
    ]
  },
  "cubitbuilder": {
    "prefix": "cubitbuilder",
    "body": [
      "BlocBuilder<$1Cubit, $1State>(",
      "\tbuilder: (context, state) {$0}",
      "),"
    ]
  },
  "sizedbox": {
    "prefix": "sizedbox",
    "body": ["const SizedBox($1)$0"]
  },
  "theme": {
    "prefix": "theme",
    "body": ["final theme = Theme.of(context);"]
  },
  "sleep": {
    "prefix": "sleep",
    "body": [
      "await Future<dynamic>.delayed(const Duration(milliseconds: ${1:1000}));$0"
    ]
  },
  "repeat widget": {
    "prefix": "repeat",
    "body": ["for(var i = 0; i < $1; i++)$0"]
  },
  "freezed model": {
    "prefix": "fmodel",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "part '$TM_FILENAME_BASE.freezed.dart';",
      "",
      "@freezed",
      "\tclass ${1:name} with _$$1 {",
      "\tconst factory $1({",
      "\t\t$0",
      "\t}) = _$1;",
      "\tconst $1._();",
      "}"
    ]
  }
}
